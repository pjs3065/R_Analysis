data_raw = iris
View(data_raw)
View(data_raw)
sepal.Length
sepal.length
plot(iris)
featurePlot
library("caret")
library("caret")
install.packages("caret")
library(caret)
head(data_raw)
head(data_raw[1:5,])
head(data_raw[,])
seq(1,10)
seq(1,10,2)
data_raw$Species
featurePlot(data_raw[,1:4], data_raw$Species, "ellipse")
installed.packages("ellipse")
install.packages("ellipse")
featurePlot(data_raw[,1:4], data_raw$Species, "ellipse")
trainRowNumber = createDataPartition()
trainRowNumber = createDataPartition(iris$Species, p=0.8, list = FALSE)
trainRowNumber
clean
clear
testData = iris[-trainRowNumber]
model= train(Special ~., data = trainData, method = 'earth')
trainData = iris[trainRowNumber]
model= train(Special ~., data = trainData, method = 'earth')
model= train(Species ~., data = trainData, method = 'earth')
model = train(Species ~., data = trainData, method = 'earth')
install.packages("data")
model = train(Species ~., data = trainData, method = 'earth')
model = train(Species~., data = trainData, method = 'earth')
?train
model = train(Species ~ ., data = trainData, method = 'earth')
model = train(Species ~ ., data = trainData, method = 'earth')
model
model
?model
?train
model = train(Species ~ ., data = trainDatas, method = 'earth')
model = train(Species ~ ., data = trainData, method = 'earth')
model <- train(Species ~ ., data = trainData, method = 'earth')
trainData = iris[trainRowNumber]
trainData
modelnames = paste(names(getModelInfo()), collapse = ',')
modelnames
model = train(Species ~ ., data = trainData, method = 'earth')
trainData = iris[trainRowNumber,]
testData = iris[-trainRowNumber,]
model = train(Species ~ ., data = trainData, method = 'earth')
model = train(Species ~ ., data = trainData, method = 'earth')
model = train(Species ~., data = trainData, method = 'earth')
install.packages("function")
install.packages("earth")
install.packages("earth")
model = train(Species ~., data = trainData, method = 'earth')
install.packages("train")
install.packages("train")
model = train(Species ~., data = trainData, method = 'earth')
install.packages("e1071")
library(e1071)
model = train(Species ~., data = trainData, method = 'earth')
library('caret')
library('e1071')
model = train(Species ~., data = trainData, method = 'earth')
model
model = train(Species ~., data = trainData, method = 'lda')
model
predicted = predict(model, testData)
sum(predicted == testData$Species) / 30 * 100
sum
testData
predicted
model
predicted = predict(model, testData)
testData$Species
sum(predicted == testData$Species) / 30 * 100
confustionMatrix(reference = testData$Species, data = predicted, mode = 'everything', positive = 'MM')
install.packages("confustion")
confusionMatrix(reference = testData$Species, data = predicted, mode = 'everything', positive = 'MM')
model = train(Species ~., data = trainData, method = 'glm')
install.packages("train")
?glm
model = train(Species ~., data = trainData, method = 'glm', family - 'binomial')
?train
?lda
model = train(Species ~., data = trainData, method = "glm", family - "binomial")
model = train(Species ~., data = trainData, method = 'glm', family = 'binomial')
library(caret)
install.packages("randomForest")
install.packages("eartch")
install.packages("earth")
featurePlot(data_raw[,1:4], data_raw$Species, "ellipse")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
model = train(Species ~., data = trainData, method = "glm", family - "binomial")
install.packages("iterators")
model = train(Species ~., data = trainData, method = "glm", family - "binomial")
install.packages("caret")
model = train(Species ~., data = trainData, method = "glm", family - "binomial")
model = train(Species ~., data = trainData, method = 'glm', family = 'binomial')
library(caret)
model = train(Species ~., data = trainData, method = 'glm', family = 'binomial')
warnins()
warnings()
class_pack = c("caret", "skimr", "RANN","randomForest","fastAdaboost","gbm","xgboost", "caretEnsemble","C50","earth")
install.packages(class_pack)
install.packages(class_pack)
library(caret)
libray(skimr)
library(skimr)
library(RANN)
orange = read.csv('https://raw.githubusercontent.com/selva86/datasets/master/orange_juice_sithmissing.csv')
orange = read.csv('https://github.com/selva86/datasets/blob/master/orange_juice_withmissing.csv')
orange = read.csv('https://raw.github.com/selva86/datasets/blob/master/orange_juice_withmissing.csv')
orange = read.csv('https://raw.githubusercontent.com/selva86/datasets/master/orange_juice_withmissing.csv')
View(orange)
View(orange)
plot(orange)
rm(list=ls())
orange = read.csv('https://raw.githubusercontent.com/selva86/datasets/master/orange_juice_withmissing.csv')
str(oragne)
str(orange)
trainRowNumbers = createDataPartition(orange$Purchase, p = 0.8, list = FALSE)
trainData = orange[trainRowNumbers,]
testData = orange[-trainRowNumbers,]
x= trainData[,2:18]
y = trainData$Purchase
skimmed = skim_to_wide(trainData)
skimmed[,c(10:16)]
anyNA(trainData)
anyNa(iris)
anyNA(iris)
preProcess_missingdata_model = preProcess(trainData, method = 'knnImpute')
trainData_impute = predict(preProcess_missingdata_model,newdata = trainData)
anyNA(trainData_impute)
View(trainData_impute)
View(trainData_impute)
dummies_model = dummyVars(Purchase ~., data = trainData_impute)
trainData_mat = predict(dummies_model, newdata = trainData_impute)
View(trainData_mat)
trainData_dummy = data.frame(trainData_mat)
View(trainData_dummy)
View(trainData_dummy)
View(trainData_dummy)
preProcess_range_model = preProcess(trainData_dummy, method = 'range')
trainData_pre = predict(preProcess_range_model, newdata = trainData_dummy)
apply(trainData_pre[,1:10], 2, FUN=function(x){c{'min'=min(x),'max'=max(x)}})
apply(trainData_pre[, 1:10], 2, FUN=function(x){c('min'=min(x), 'max'=max(x))})
View(trainData_dummy)
View(trainData_mat)
trainData_pre$Purchase = y
model_rf = train(Purchase ~., data = trainData_pre, method = 'rf')
model_rf
plot(model_rf)
varimp_rf = varImp(model_rf)
plot(varimp_rf)
testData2 = predict(preProcess_missingdata_model,testData)
testData3 = predict(dummies_model], testData2)
testData3 = predict(dummies_model, testData2)
testData3 = predict(dummies_model, testData2)
testData3 = data.frame(testData3)
testData4 = predict(preProcess_range_model, testData3)
fitControl <- trainControl(method = 'cv', number = 5, savePredictions = 'final', classProbs = T, summaryFunction = twoClassSummary)
model_mars2 = train(Purchase ~., data = trainData_pre, method = 'earth', metric = 'ROC', tuneLength = 5, trControl = fitControl)
model_mars2
predicted_rf2 = predict(model_mars2, testData4)
confusionMatrix(reference = testData$Purchase, data = predicted_rf2, mode = 'everything', positive = 'MM')
model_mars3 = train(Purchase ~., data = trainData_pre, method = 'rf', metric = 'ROC', tuneLength = 5, trControl = fitControl)
predicted_rf2 = predict(model_mars3, testData4)
confusionMatrix(reference = testData$Purchase, data = predicted_rf3, mode = 'everything', positive = 'MM')
confusionMatrix(reference = testData$Purchase, data = predicted_rf2, mode = 'everything', positive = 'MM')
model_mars4 = train(Purchase ~., data = trainData_pre, method = 'svmRadial', metric = 'ROC', tuneLength = 5, trControl = fitControl)
predicted_rf4 = predict(model_mars4, testData4)
confusionMatrix(reference = testData$Purchase, data = predicted_rf4, mode = 'everything', positive = 'MM')
model_mars5 = train(Purchase ~., data = trainData_pre, method = 'nnet', metric = 'ROC', tuneLength = 5, trControl = fitControl)
predicted_rf5 = predict(model_mars5, testData4)
confusionMatrix(reference = testData$Purchase, data = predicted_rf5, mode = 'everything', positive = 'MM')
model_mars2 = train(Purchase ~., data = trainData_pre, method = 'earth', metric = 'ROC', tuneLength = 5, trControl = fitControl)
predicted_rf2 = predict(model_mars2, testData4)
confusionMatrix(reference = testData$Purchase, data = predicted_rf2, mode = 'everything', positive = 'MM')
model_mars3 = train(Purchase ~., data = trainData_pre, method = 'rf', metric = 'ROC', tuneLength = 5, trControl = fitControl)
predicted_rf3 = predict(model_mars3, testData4)
confusionMatrix(reference = testData$Purchase, data = predicted_rf3, mode = 'everything', positive = 'MM')
confusionMatrix(reference = testData$Purchase, data = predicted_rf5, mode = 'everything', positive = 'MM')
confusionMatrix(reference = testData$Purchase, data = predicted_rf2, mode = 'everything', positive = 'MM')
confusionMatrix(reference = testData$Purchase, data = predicted_rf3, mode = 'everything', positive = 'MM')
confusionMatrix(reference = testData$Purchase, data = predicted_rf4, mode = 'everything', positive = 'MM')
confusionMatrix(reference = testData$Purchase, data = predicted_rf5, mode = 'everything', positive = 'MM')
url_address = https://www.dropbox.com/s/4wpkhme7476zdt3/ dataset.csv?dl=1
dataset <- read.csv(url_address)
url_address = 'https://www.dropbox.com/s/4wpkhme7476zdt3/ dataset.csv?dl=1'
dataset <- read.csv(url_address)
View(dataset)
View(dataset)
class_pack = c("caret", "skimr", "RANN","randomForest","fastAdaboost","gbm","xgboost", "caretEnsemble","C50","earth")
install.packages(class_pack)
install.packages(class_pack)
